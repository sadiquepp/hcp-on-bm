---
# Start with Installing the required packages on the Host

- name: Install Basic Required Packages.
  yum:
    name: "{{ basic_packages }}"
    state: installed

# Once Packages are installed, lets start the Libvirt Service
- name: Start Libvirtd Service
  systemd:
    state: started
    name: libvirtd
    enabled: yes


# Once Check if Key Exists
- name: Check the SSH KeyPair Existence
  stat:
    path: "~/.ssh/lab_rsa"
  register: ssh_key_status
  tags:
    - ssh

# Create Key if not existing
- name: Create SSH Key if not existing
  community.crypto.openssh_keypair:
    path: "~/.ssh/lab_rsa"
    type: rsa
    size: 2048
    mode: '0600'
  when: ssh_key_status.stat.exists == false 
  tags:
    - ssh

# Enable Nested KVM
- name: Enable Nested KVM
  copy:
    dest: /etc/modprobe.d/kvm-nested.conf
    content: |
      options kvm-intel nested=1

# Prepare the KVM Image 
- name: Remove Cloud-Init & Add Password  
  shell: | 
    export LIBGUESTFS_BACKEND=direct && virt-customize -a "{{ role_path }}/files/{{ rhel9_kvm_image }}" --root-password password:redhat --ssh-inject "root:file:/root/.ssh/lab_rsa.pub" --selinux-relabel --run-command 'yum remove cloud-init* -y' --run-command 'echo "PermitRootLogin yes" >>/etc/ssh/sshd_config'
    

# Once Check if Key Exists
- name: Check the Helper Disk Existence
  stat:
    path: "/var/lib/libvirt/images/{{ helper_disk }}"
  register: helper_disk_status
  tags:
    - virt
   
# Prepare the Helper Image 
- name: Create Helper VM Disk
  ansible.builtin.copy:
    src: "{{ role_path }}/files/{{ rhel9_kvm_image }}"
    dest: "/var/lib/libvirt/images/{{ helper_disk }}"
  when: helper_disk_status.stat.exists == false
  tags:
  - virt

- name: Check Network status 
  shell: virsh net-dumpxml default | grep "ip='192.168.122.21'"
  register: virt_net_status
  ignore_errors: yes
  tags:
  - net

- name: Setup the DHCP Network 
  shell: | 
    virsh net-update --network "default" add-last ip-dhcp-host \
    --xml "<host mac='52:54:00:e2:54:{{ item.value }}' name='{{ item.key }}' ip='192.168.122.{{ item.value }}' />" --live --config
  with_dict:
  - "{{ ip_list }}"
  when: virt_net_status.stdout == ''
  tags:
  - net
  

- name: Check if VM is running using virsh
  shell: "virsh dominfo helper| grep 'State' | awk '{print $2}'"
  register: vm_state
  tags:
  - virt

- name: Define the Helper VM 
  shell: |
    virt-install --import --name "{{ helper_name }}" --memory "{{ helper_memory }}" --vcpus "{{ helper_vcpus }}"  --disk "/var/lib/libvirt/images/{{ helper_disk }}",format=qcow2,bus=virtio  --os-variant=rhel9.4 --noautoconsole --network network:default,mac=52:54:00:e2:54:{{ip_list.helper_server}}
  when: vm_state.stdout == ''
  tags:
  - virt

- name: Attach New Interfaces
  shell: |
    virsh domiflist helper | wc -l 
  register: virt_int
  tags:
  - virt-int

- name: Debug
  debug: 
    msg: "{{ virt_int }}"
  tags:
  - virt-int

- name: Attach New Interfaces
  shell: |
    virsh attach-interface --type bridge --source virbr0  --model virtio helper --mac 52:54:00:e2:54:39 --persistent
    virsh attach-interface --type bridge --source virbr0  --model virtio helper --mac 52:54:00:e2:54:49 --persistent
  when: virt_int.stdout|int < 6 
  tags:
  - virt-int
    
- name: Wait for the VM to boot
  shell: |
    sleep 30s
